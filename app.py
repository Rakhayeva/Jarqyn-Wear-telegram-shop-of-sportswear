import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
BOT_TOKEN = os.environ.get("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìã –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jarqyn Wear ‚Äî –º–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–ª—å–Ω–æ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –π–æ–≥–∏!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ë—Ä–∞", callback_data="cat_bra")],
        [InlineKeyboardButton("–õ–æ—Å–∏–Ω—ã", callback_data="cat_leggings")],
        [InlineKeyboardButton("–§—É—Ç–±–æ–ª–∫–∏", callback_data="cat_tshirts")],
        [InlineKeyboardButton("–ú–∞–π–∫–∏", callback_data="cat_tanks")],
        [InlineKeyboardButton("–õ–æ–Ω–≥—Å–ª–∏–≤—ã", callback_data="cat_longsleeves")],
        [InlineKeyboardButton("–ù–æ—Å–∫–∏", callback_data="cat_socks")],
        [InlineKeyboardButton("–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ", callback_data="cat_underwear")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cat_bra":
        keyboard = [
            [InlineKeyboardButton("–ë—Ä–∞ Secure Support", callback_data="bra_secure")],
            [InlineKeyboardButton("–ë—Ä–∞ Active Move", callback_data="bra_active")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –±—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π


# –û–ø—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π –±—Ä–∞
async def bra_model_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    model = query.data
    color_keyboard = []
    size_keyboard = []
    chart_button = InlineKeyboardButton("üìê –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–≤", callback_data=f"{model}_chart")


    if model == "bra_secure":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏
        await query.message.reply_photo(photo=open("images/AgACAgIAAxkBAAMSaF1QI9J6v6jUdkIm11yd5z-TfT4AAu_uMRuTdehK-NxYzJdGMOUBAAMCAAN4AAM2BA.jpg", "rb"))
        color_keyboard = [
            [InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data="color_secure_white")],
            [InlineKeyboardButton("–ì–æ–ª—É–±–æ–π", callback_data="color_secure_blue")],
            [InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π", callback_data="color_secure_black")]
        ]
        size_keyboard = [
            [InlineKeyboardButton("S", callback_data="size_secure_S"), InlineKeyboardButton("M", callback_data="size_secure_M"), InlineKeyboardButton("L", callback_data="size_secure_L")]
        ]
    elif model == "bra_active":
        await query.message.reply_photo(photo=open("images/AgACAgIAAxkBAAMZaF1QkZBN1U7qGFCId_DcwBZ88XoAAlr0MRu9IOlKJlKv6ea526MBAAMCAAN5AAM2BA.jpg", "rb"))
        color_keyboard = [
            [InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data="color_active_white")],
            [InlineKeyboardButton("–ì–æ–ª—É–±–æ–π", callback_data="color_active_blue")],
            [InlineKeyboardButton("–ú—è—Ç–Ω—ã–π", callback_data="color_active_mint")],
            [InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π", callback_data="color_active_black")]
        ]
        size_keyboard = [
            [InlineKeyboardButton("S", callback_data="size_active_S"), InlineKeyboardButton("M", callback_data="size_active_M"),
             InlineKeyboardButton("L", callback_data="size_active_L"), InlineKeyboardButton("XL", callback_data="size_active_XL")]
        ]

    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=InlineKeyboardMarkup(color_keyboard))
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=InlineKeyboardMarkup(size_keyboard))
    await query.message.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:", reply_markup=InlineKeyboardMarkup([[chart_button]]))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –±—Ä–∞
async def color_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    color = query.data

    # –î–ª—è –º–æ–¥–µ–ª–∏ bra_secure
    if color == "color_secure_white":
        await query.message.reply_photo(photo="AgACAgIAAxkBAAMSaF1QI9J6v6jUdkIm11yd5z-TfT4AAu_uMRuTdehK-NxYzJdGMOUBAAMCAAN4AAM2BA")
    elif color == "color_secure_blue":
        await query.message.reply_photo(photo="AgACAgIAAxkBAAMVaF1QV5C8Xlzqweezwtf2OCkMPSgAAvLuMRuTdehKSgviwXX4618BAAMCAAN4AAM2BA")
    elif color == "color_secure_black":
        await query.message.reply_photo(photo="AgACAgIAAxkBAAMXaF1QcIuVJTKkyKQjXGOxAAFBv-mJAALz7jEbk3XoSg88Ty4NENp5AQADAgADeAADNgQ")

    # –î–ª—è –º–æ–¥–µ–ª–∏ bra_active
    elif color == "color_active_white":
    photos = [
        InputMediaPhoto(media="AgACAgIAAxkBAAMbaF1SgjEkYFRhRaKjPTsd74_KZRkAAmj0MRu9IOlKgpnzRQ8-LpMBAAMCAAN5AAM2BA"),
        InputMediaPhoto(media="fileAgACAgIAAxkBAAMdaF1SjxSotsnyF7W7sKRHdWLra4cAAmr0MRu9IOlKTo8e3zTlKocBAAMCAAN5AAM2BA_id_2"),
    ]
    await query.message.reply_media_group(photos)
    
    elif color == "color_active_blue":
        photos = [
        InputMediaPhoto(media="AgACAgIAAxkBAAMZaF1QkZBN1U7qGFCId_DcwBZ88XoAAlr0MRu9IOlKJlKv6ea526MBAAMCAAN5AAM2BA"),
        InputMediaPhoto(media="AgACAgIAAxkBAAMfaF1TFtF5PkVRfrgtkMfqLOh8kh8AAm30MRu9IOlK8PNQrrTOZyUBAAMCAAN5AAM2BA"),
    ]
    await query.message.reply_media_group(photos)

    elif color == "color_active_mint":
        photos = [
        InputMediaPhoto(media="AgACAgIAAxkBAAMhaF1TckEINY4B6LOS_Eg2UeYMfzkAAm_0MRu9IOlKLUVxz6Z4RM0BAAMCAAN5AAM2BA"),
        InputMediaPhoto(media="AgACAgIAAxkBAAMjaF1Tks1dTxCPELimRvpgLd5BgcUAArj9MRsdF-hKq8Wb0ks8a1UBAAMCAAN5AAM2BA"),
    ]
    await query.message.reply_media_group(photos)

    elif color == "color_active_black":
        photos = [
        InputMediaPhoto(media="AgACAgIAAxkBAAMlaF1T0dqffe_UjoLWY6La1MZYbSUAAnT0MRu9IOlKtBcsjaj4FboBAAMCAAN5AAM2BA"),
        InputMediaPhoto(media="AgACAgIAAxkBAAMnaF1T2A9YJk3hTqjZqHCCpGQvwzYAAiHvMRuTdehKml9did1WGr0BAAMCAAN5AAM2BA"),
    ]
    await query.message.reply_media_group(photos)


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp:\nhttps://wa.me/77052963629")

# –û –Ω–∞—Å
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°—Ç–∏–ª—å–Ω–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ —Å–ø–æ—Ä—Ç–∞ –ø–æ —á–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω–µ. –î–ª—è –¥–µ–≤—É—à–µ–∫ –∏ –∂–µ–Ω—â–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–æ—Ç—è—Ç—Å—è –æ —Å–µ–±–µ –∏ –≤—ã–±–∏—Ä–∞—é—Ç —É–¥–æ–±—Å—Ç–≤–æ.")


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ö–∞—Ç–∞–ª–æ–≥"), show_catalog))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ö–æ–Ω—Ç–∞–∫—Ç—ã"), contacts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–û –Ω–∞—Å"), about))

    app.add_handler(CallbackQueryHandler(category_handler, pattern="^cat_.*$"))
    app.add_handler(CallbackQueryHandler(bra_model_handler, pattern="^bra_.*$"))
    app.add_handler(CallbackQueryHandler(color_handler, pattern="^color_.*$")) 

    app.run_polling()

if __name__ == "__main__":
    main()

